dist: bionic
language: cpp
compiler: gcc

#env:
#  # "BINTRAY_KEY=<secure>"
#  - secure: "AjycfSfIztFeat6AO3SETSFW9Xd0AUt17hg87sEo8pSPO3SILq6bKS5Pfe4Bdo3Za32BvGzeJaOZ9EEVtzweuYJwsBejVfk2lxiBH5RKoBVrHpJLXDNj7MUt2ezb734bjFFt3+lMG84vSCqioNMcYwlHcqCChiTT529NZhaGMsDFzF5NimJZl0LGcEQlaTxTfeCKwSk+apHw5rQes2I2Jf9icweUGe/VOOVmYjDTiPWKcBEwBvfV5vabr5btCgUY8zK5451x/35API2Hbq7o0hNxqvwQUFI54jZwqfR4DOA1V/Nk7rdc34Fe+xgKSoBmHC0RgCIbXw1erEkn31Y0+tLBVxa971FB+y7L+5ZEaqw9UolT0PM5LHZmWUA60A5JlvsFOr0urid8lk0g5mdGF4aHEy2O5rDOMbwE11MpTEkDDbgE6uSD0/aubTJYPu24yMlBrP1lz10Sltg+YLi5hshhzRmd4iWTKuEy4jly1SdOKjjdbLCzlAnsF9Ta0a/lfumOd2lmELhYKhFLuVTCWZFvjpJyziCIFLVs4refDbDrsdfE+CaJedP/uBDGoBp4Hg6aug+66zKPybVzODqR2uIa3I7ACM3l/GdJcGg+1AH1T/ievq4rQ52T3MspevFxQmevuA9vvgOVko79PDrW1xbp+oQPTk0/pODNjVvrZFk="

script:
  - DATE=`date +%Y%m%d`
  - GIT_HASH=`git rev-parse --short HEAD`
  
  # Compile airspy
  - wget https://github.com/airspy/host/archive/master.zip
  - unzip master.zip
  - cd airspyone_host-master/
  - mkdir build
  - cd build
  - cmake ../ -DINSTALL_UDEV_RULES=ON
  - make -j 4
  - sudo make install
  - cd ../..
  
  # Compile librtlsdr
  - git clone https://github.com/steve-m/librtlsdr.git
  - cd librtlsdr
  - mkdir build
  - cd build
  - cmake ../  -DDETACH_KERNEL_DRIVER=ON
  - make -j 4
  - sudo make install
  - cd ../..
  
  # Compile welle.io
  - mkdir build
  - cd build
  - qmake PREFIX=/usr ..
  - make -j4
  - cd ..
  
  # Compile welle-cli
  - mkdir build-cli
  - cd build-cli
  - cmake ../  -DBUILD_WELLE_IO=OFF -DAIRSPY=TRUE -DRTLSDR=TRUE -DSOAPYSDR=TRUE
  - make -j4
  - cd ..

jobs:
  include:
    - os: linux

      before_install:
        # QT
        - sudo add-apt-repository ppa:beineri/opt-qt-5.15.2-bionic -y
        # SoapySDR
        - sudo add-apt-repository ppa:myriadrf/drivers -y
        - sudo apt-get update -qq

      install:
        - sudo apt-get -y install sshpass
        
        # For AppImage
        - sudo apt-get -y install libusb-1.0-0-dev pkg-config libmp3lame-dev libmpg123-dev qt515base qt515declarative qt515quickcontrols qt515quickcontrols2 qt515charts-no-lgpl qt515graphicaleffects qt515multimedia libpulse0 libfaad-dev libfftw3-dev libusb-1.0-0-dev mesa-common-dev libglu1-mesa-dev libpulse-dev libsoapysdr-dev
        - source /opt/qt515/bin/qt515-env.sh
        
        # For Flatpak
        - sudo add-apt-repository ppa:alexlarsson/flatpak -y
        - sudo apt-get update -qq
        - sudo apt-get -y install flatpak-builder elfutils
        - sudo flatpak remote-add --if-not-exists flathub https://dl.flathub.org/repo/flathub.flatpakrepo
        - sudo flatpak install -y flathub org.kde.Sdk//5.15 org.kde.Platform//5.15

      after_success:
        - sudo ldconfig

        # Get linuxdeploy
        - sudo wget https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage -P /usr/local/bin
        - sudo chmod +x /usr/local/bin/linuxdeploy-x86_64.AppImage
        - sudo wget https://github.com/linuxdeploy/linuxdeploy-plugin-qt/releases/download/continuous/linuxdeploy-plugin-qt-x86_64.AppImage -P /usr/local/bin
        - sudo chmod +x /usr/local/bin/linuxdeploy-plugin-qt-x86_64.AppImage
        
        # Prepare welle.io AppImage
        - find build/
        - mkdir -p ./appdir/usr/share/applications
        - cp welle-io.desktop ./appdir/usr/share/applications
        - mkdir -p ./appdir/usr/bin
        - cp build/src/welle-gui/welle-io ./appdir/usr/bin
        - mkdir -p ./appdir/usr/lib
        - mkdir -p ./appdir/usr/share/icons/hicolor/512x512/apps/
        - cp src/welle-gui/icons/icon.png appdir/usr/share/icons/hicolor/512x512/apps/welle-io.png
        
        # Create welle.io AppImage
        - QML_SOURCES_PATHS=. linuxdeploy-x86_64.AppImage --appdir ./appdir --plugin qt --output appimage
        - mv welle.io-"$GIT_HASH"-x86_64.AppImage "$DATE"_"$GIT_HASH"_Linux_welle-io-x86_64.AppImage

        # Prepare welle-cli AppImage
        - find build-cli/
        - mkdir -p ./appdir-cli/usr/share/applications
        - cp welle-cli.desktop ./appdir-cli/usr/share/applications
        - mkdir -p ./appdir-cli/usr/bin
        - cp build-cli/welle-cli ./appdir-cli/usr/bin
        - mkdir -p ./appdir-cli/usr/lib
        - mkdir -p ./appdir-cli/usr/share/icons/hicolor/512x512/apps/
        - cp src/welle-gui/icons/icon.png appdir-cli/usr/share/icons/hicolor/512x512/apps/welle-io.png
        
        # Create welle-cli AppImage
        - linuxdeploy-x86_64.AppImage --appdir ./appdir-cli --output appimage
        - mv welle.io-cli-"$GIT_HASH"-x86_64.AppImage "$DATE"_"$GIT_HASH"_Linux_welle-io-cli-x86_64.AppImage
        
        # Create welle-gui Flatpak
        - sudo flatpak-builder --repo=wellerepo --force-clean fp_build io.welle.welle-gui.json
        - sudo flatpak --user remote-add --no-gpg-verify welle-repo wellerepo
        - sudo flatpak --user install welle-repo io.welle.welle-gui --assumeyes
        - flatpak build-bundle wellerepo welle-io.flatpak io.welle.welle-gui
        - mv welle-io.flatpak "$DATE"_"$GIT_HASH"_Linux_welle-io-x86_64.flatpak
        
        # Upload
        - sshpass -p ${SFTP_PASSWORD} scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null "$DATE"_"$GIT_HASH"_Linux_welle-io-x86_64.AppImage ${SFTP_USER}@welle-io-nightlies.albrechtloh.de:/welle-io-nightlies.albrechtloh.de/
        - sshpass -p ${SFTP_PASSWORD} scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null "$DATE"_"$GIT_HASH"_Linux_welle-io-cli-x86_64.AppImage ${SFTP_USER}@welle-io-nightlies.albrechtloh.de:/welle-io-nightlies.albrechtloh.de/
        - sshpass -p ${SFTP_PASSWORD} scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null "$DATE"_"$GIT_HASH"_Linux_welle-io-x86_64.flatpak ${SFTP_USER}@welle-io-nightlies.albrechtloh.de:/welle-io-nightlies.albrechtloh.de/

    - os: osx
      osx_image: xcode11.3

      before_install:
        - brew tap pothosware/homebrew-pothos
        - brew update

      install:
        - brew install fftw faad2 lame mpg123 soapysdr soapyuhd esolitos/ipa/sshpass
        - ln -s /usr/local/opt/qt/bin/qmake /usr/local/bin/qmake
        - export LIBRARY_PATH=/usr/local/lib

      after_success:
        # Get macdeployqtfix
        - curl -O https://raw.githubusercontent.com/arl/macdeployqtfix/master/macdeployqtfix.py

        # Prepare welle.io app
        - find build
        - mkdir appdir
        - cp -R build/src/welle-gui/welle-io.app appdir/welle.io.app
        - /usr/local/opt/qt/bin/macdeployqt appdir/welle.io.app -qmldir=$TRAVIS_BUILD_DIR/src/welle-gui/QML
        - cp /usr/local/lib/librtlsdr.0.dylib appdir/welle.io.app/Contents/Frameworks/librtlsdr.0.dylib
        - install_name_tool -change @rpath/librtlsdr.0.dylib @executable_path/../Frameworks/librtlsdr.0.dylib appdir/welle.io.app/Contents/MacOS/welle-io
        - python macdeployqtfix.py appdir/welle.io.app/Contents/MacOS/welle.io /usr/local/opt/qt

        # Add shortcut to Applications
        - ln -s /Applications appdir/Applications

        # Build DMG
        - hdiutil create welle-io.dmg -ov -volname "Install welle.io" -fs HFS+ -srcfolder appdir
        - hdiutil convert welle-io.dmg -format UDZO -o "$DATE"_"$GIT_HASH"_MacOS_welle-io.dmg
        - rm welle-io.dmg
       
        # Upload
        - sshpass -p ${SFTP_PASSWORD} scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null "$DATE"_"$GIT_HASH"_MacOS_welle-io.dmg ${SFTP_USER}@welle-io-nightlies.albrechtloh.de:/welle-io-nightlies.albrechtloh.de/

#before_deploy:
#  # Prepare bintray deploy
#  - sed -e "s/\${VERSION}/"$DATE"_"$GIT_HASH"/" .travis-bintray-deploy.json.template >travis-bintray-deploy.json

#deploy:
#  on:
#    branch: next
#  provider: bintray
#  file: "travis-bintray-deploy.json"
#  user: "albrechtl"
#  skip_cleanup: true
#  key: $BINTRAY_KEY

#after_deploy:
  # Delete old builds on bintray. Keep only the last 20 builds
  #- python .bintray_delete_old_version.py albrechtl $BINTRAY_KEY /packages/albrechtl/welle.io/welle.io_nightly 20
