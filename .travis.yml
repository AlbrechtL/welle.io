dist: jammy
language: cpp
compiler: gcc

git:
  depth: false

branches:
  except:
  - gh-pages
  
script:
  - DATE=`date +%Y%m%d`
  - GIT_HASH=`git rev-parse --short HEAD`
  
  # Compile airspy
  - wget https://github.com/airspy/host/archive/master.zip
  - unzip master.zip
  - cd airspyone_host-master/
  - mkdir build
  - cd build
  - cmake ../ -DINSTALL_UDEV_RULES=ON
  - make -j 4
  - sudo make install
  - cd ../..
  
  # Compile librtlsdr
  - git clone https://github.com/steve-m/librtlsdr.git
  - cd librtlsdr
  - mkdir build
  - cd build
  - cmake ../  -DDETACH_KERNEL_DRIVER=ON
  - make -j 4
  - sudo make install
  - cd ../..
  
  # Compile welle.io
  - mkdir build
  - cd build
  - $QMAKEBIN PREFIX=/usr ..
  - make -j4
  - cd ..
  - echo $PWD
  
  # Compile welle-cli
  - mkdir build-cli
  - cd build-cli
  - cmake ../  -DBUILD_WELLE_IO=OFF -DAIRSPY=TRUE -DRTLSDR=TRUE -DSOAPYSDR=TRUE
  - make -j4
  - cd ..

jobs:
  include:
    - os: linux

      install:
        - sudo apt-get -y install sshpass libfuse2 patchelf
        - sudo apt-get -y install libusb-1.0-0-dev pkg-config libmp3lame-dev libmpg123-dev libpulse0 libfaad-dev libfftw3-dev libusb-1.0-0-dev mesa-common-dev libglu1-mesa-dev libpulse-dev libsoapysdr-dev libgstreamer-plugins-base1.0-0 libgstreamer-gl1.0-0 libxkbcommon-x11-0 libxcb-icccm4 libfontconfig1-dev libfreetype6-dev libx11-dev libx11-xcb-dev libxext-dev libxfixes-dev libxi-dev libxrender-dev libxcb1-dev libxcb-glx0-dev libxcb-keysyms1-dev libxcb-image0-dev libxcb-shm0-dev libxcb-icccm4-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-shape0-dev libxcb-randr0-dev libxcb-render-util0-dev libxcb-util-dev libxcb-xinerama0-dev libxcb-xkb-dev libxkbcommon-dev libxkbcommon-x11-dev
        
        # Install qt-downloader
        - sudo apt-get -y install python3-pip
        - sudo pip3 install pipenv
        - pipenv install lxml semantic_version requests py7zr
        - git clone https://github.com/engnr/qt-downloader.git
        - pipenv run ./qt-downloader/qt-downloader linux desktop 6.2.4 gcc_64 --addon qtmultimedia qtcharts qt5compat --opensource
        - echo $PWD
        - export QMAKEBIN=$PWD/6.2.4/gcc_64/bin/qmake
        
        # For Flatpak
        #- sudo add-apt-repository ppa:alexlarsson/flatpak -y
        #- sudo apt-get update -qq
        #- sudo apt-get -y install flatpak-builder elfutils
        #- sudo flatpak remote-add --if-not-exists flathub https://dl.flathub.org/repo/flathub.flatpakrepo
        #- sudo flatpak install -y flathub org.kde.Sdk//5.15 org.kde.Platform//5.15

      after_success:
        - sudo ldconfig

        # Get linuxdeploy
        - sudo wget https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage -P /usr/local/bin
        - sudo chmod +x /usr/local/bin/linuxdeploy-x86_64.AppImage
        - sudo wget https://github.com/linuxdeploy/linuxdeploy-plugin-qt/releases/download/continuous/linuxdeploy-plugin-qt-x86_64.AppImage -P /usr/local/bin
        - sudo chmod +x /usr/local/bin/linuxdeploy-plugin-qt-x86_64.AppImage
        - sudo wget https://raw.githubusercontent.com/linuxdeploy/linuxdeploy-plugin-gstreamer/master/linuxdeploy-plugin-gstreamer.sh -P /usr/local/bin
        - sudo chmod +x /usr/local/bin/linuxdeploy-plugin-gstreamer.sh
        
        # Prepare welle.io AppImage
        - find build/
        - mkdir -p ./appdir/usr/share/applications
        - cp welle-io.desktop ./appdir/usr/share/applications
        - mkdir -p ./appdir/usr/bin
        - cp build/src/welle-gui/welle-io ./appdir/usr/bin
        - mkdir -p ./appdir/usr/lib
        - mkdir -p ./appdir/usr/share/icons/hicolor/512x512/apps/
        - cp src/welle-gui/icons/icon.png appdir/usr/share/icons/hicolor/512x512/apps/welle-io.png
        
        # Create some libraries inside QT6 to workround an expection. Maybe a bug inside linuxdeploy-x86_64.AppImage?
        # See here https://github.com/linuxdeploy/linuxdeploy-plugin-qt/issues/122
        - mkdir /home/travis/build/AlbrechtL/welle.io/6.2.4/gcc_64/plugins/mediaservice
        - mkdir /home/travis/build/AlbrechtL/welle.io/6.2.4/gcc_64/plugins/audio
        
        # Create welle.io AppImage
        - echo $PWD
        - QML_SOURCES_PATHS=. QMAKE=$QMAKEBIN linuxdeploy-x86_64.AppImage --appdir ./appdir --plugin qt --plugin gstreamer --output appimage
        - mv welle.io-"$GIT_HASH"-x86_64.AppImage "$DATE"_"$GIT_HASH"_Linux_welle-io-x86_64.AppImage

        # Prepare welle-cli AppImage
        - find build-cli/
        - mkdir -p ./appdir-cli/usr/share/applications
        - cp welle-cli.desktop ./appdir-cli/usr/share/applications
        - mkdir -p ./appdir-cli/usr/bin
        - cp build-cli/welle-cli ./appdir-cli/usr/bin
        - mkdir -p ./appdir-cli/usr/lib
        - mkdir -p ./appdir-cli/usr/share/icons/hicolor/512x512/apps/
        - cp src/welle-gui/icons/icon.png appdir-cli/usr/share/icons/hicolor/512x512/apps/welle-io.png
        
        # Create welle-cli AppImage
        - linuxdeploy-x86_64.AppImage --appdir ./appdir-cli --output appimage
        - mv welle.io-cli-"$GIT_HASH"-x86_64.AppImage "$DATE"_"$GIT_HASH"_Linux_welle-io-cli-x86_64.AppImage
        
        # Create welle-gui Flatpak
        #- sudo flatpak-builder --repo=wellerepo --force-clean fp_build io.welle.welle_io.json
        #- sudo flatpak --user remote-add --no-gpg-verify welle-repo wellerepo
        #- sudo flatpak --user install welle-repo io.welle.welle_io --assumeyes
        #- flatpak build-bundle wellerepo welle-io.flatpak io.welle.welle_io
        #- mv welle-io.flatpak "$DATE"_"$GIT_HASH"_Linux_welle-io-x86_64.flatpak

        # Upload
        - sshpass -p ${SFTP_PASSWORD} scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null "$DATE"_"$GIT_HASH"_Linux_welle-io-x86_64.AppImage ${SFTP_USER}@welle-io-nightlies.albrechtloh.de:/welle-io-nightlies.albrechtloh.de/
        - sshpass -p ${SFTP_PASSWORD} scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null "$DATE"_"$GIT_HASH"_Linux_welle-io-cli-x86_64.AppImage ${SFTP_USER}@welle-io-nightlies.albrechtloh.de:/welle-io-nightlies.albrechtloh.de/
        #- sshpass -p ${SFTP_PASSWORD} scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null "$DATE"_"$GIT_HASH"_Linux_welle-io-x86_64.flatpak ${SFTP_USER}@welle-io-nightlies.albrechtloh.de:/welle-io-nightlies.albrechtloh.de/

  # temporary exclude
  exclude:
    - os: osx
      osx_image: xcode13.2

      before_install:
        - brew tap pothosware/homebrew-pothos
        - brew update
        - brew pin ansible

      install:
        - brew install fftw faad2 lame mpg123 soapysdr esolitos/ipa/sshpass qt@5
        - brew install --HEAD soapyuhd
        - echo 'export PATH="/usr/local/opt/qt@5/bin:$PATH"' >> ~/.zshrc
        - source ~/.zshrc
        - export LIBRARY_PATH=/usr/local/lib

      after_success:
        # Get macdeployqtfix
        - curl -O https://raw.githubusercontent.com/arl/macdeployqtfix/master/macdeployqtfix.py

        # Prepare welle.io app
        - find build
        - mkdir appdir
        - cp -R build/src/welle-gui/welle-io.app appdir/welle.io.app
        - macdeployqt appdir/welle.io.app -qmldir=$TRAVIS_BUILD_DIR/src/welle-gui/QML
        - cp /usr/local/lib/librtlsdr.0.dylib appdir/welle.io.app/Contents/Frameworks/librtlsdr.0.dylib
        - install_name_tool -change @rpath/librtlsdr.0.dylib @executable_path/../Frameworks/librtlsdr.0.dylib appdir/welle.io.app/Contents/MacOS/welle-io
        - python macdeployqtfix.py appdir/welle.io.app/Contents/MacOS/welle.io /usr/local/opt/qt

        # Add shortcut to Applications
        - ln -s /Applications appdir/Applications

        # Build DMG
        - hdiutil create welle-io.dmg -ov -volname "Install welle.io" -fs HFS+ -srcfolder appdir
        - hdiutil convert welle-io.dmg -format UDZO -o "$DATE"_"$GIT_HASH"_MacOS_welle-io.dmg
        - rm welle-io.dmg

        # Upload
        - sshpass -p ${SFTP_PASSWORD} scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null "$DATE"_"$GIT_HASH"_MacOS_welle-io.dmg ${SFTP_USER}@welle-io-nightlies.albrechtloh.de:/welle-io-nightlies.albrechtloh.de/
